TODO:

1:  wrappable:
    - prefer instance extension over class inclusion (see above?)
    - write more readable / less fragile tests
    
2:  dino_catalog
    - global:       switch to activesupport concerns
                    https://gist.github.com/scottsims/09a23ee408c260351111

3:  data_science
    - refactor to introspect on file information for instantation klasses.
      - OR inject importer into parser prior to passing off to calculator
    - hash_matcher / keys for in 'exposes correct fields' in SplitTestCalculator
    - extra reject clause from init_tester in SplitTest
    - just use keys in build_groups in SplitTest

4:  overlord
    - modify routes to remove "case" statement in BombHelpers#configure_bomb
    - remove inline styles from views
    - modify features to remove assertion in /Given/ and setup bomb
    - modify specs to setup bomb instead of relying on previously established states

5:  TEST ENGINEERING LEVELUP STUFF

    Exercise: Knows how Capybara and drivers work
    - Name a case where a driver other than the default would be necessary, then go implement it with your overlord code.

    Exercise: Uses happy path, sad path, and error path to create test cases
    - Go back to all the tests you've written for this course. Organize them according to what type of test they are.
    - Think about what sort of tests you may have missed for the various paths, and add them to the code.

    One of the tools that might make you wrinkle your nose is a test plan. Planning your test process -- for your code or others' -- is a huge step toward doing good test work. Read this article and spend some time thinking about how you're going to test your next software project.

    Exercise: Writes test plans at the beginning of a task, and uses them to clarify requirements
    - Do the Shopping Cart exercise.

    Exercise: Tries to make tests fail to verify that they work
    - Go check the tests you've written during this course. Try to change the system under test to make the tests fail. If they don't, refactor them until they do.

    *** constraining manual testing time: look up "timeboxing"

    *** http://robots.thoughtbot.com/write-reliable-asynchronous-integration-tests-with-capybara


    Blake Thomas [12:46 PM] HAPPY / SAD / BAD

    so, "happy" vs "sad" is actually "positive" vs "negative" test cases. think of those in terms of permissions, you can (positive), you can't (negative), and bug (invalid). so, to add further analogy to injury: let's say you have to make a payment that meets a commitment. happy, or positive, is that your payment is large enough. the payment is accepted, you get a nice flash message in green, &c. sad, or negative, is that your payment isn't large enough, you get a flash message in red with exclamations, &c. bad or invalid is that you enter in -1 and it accepts it because the comparison logic inverts for negative numbers and doesn't reject them outright. you get the green flash message, but you can't view your loan detail because it raises an exception.